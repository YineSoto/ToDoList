@page "/todo"
@using global::ToDoList.App
@using global::ToDoList.DTO
@inject LocalStorageAccessor LocalStorageAccessor
@inject HttpClient Http
@*Comentarios así, para que no se vean en el HTML*@
@*En el caso del Inject, la clase de esta no nos salga podemos hacer CTRL + click sobre la clase para añadir el
"paquete"*@


<PageTitle>Todo</PageTitle>

<h1>To Do List</h1>

<!--Hacemos un foreach para iterar sobre las tareas y mostrarlas con formato HTML, en el onclick hacemos una
funcion anonima para llamar a SaveAsync para actualizar el checkbox -->
@foreach (TodoTask item in tasks)
{
    <p><input type="checkbox" @bind="item.IsComplete" @onclick=" () => SaveAsync(item)" /> @item    <button @onclick="() => DeleteTaskAsync(item)">Remove</button></p>
}

<!--Input para ingresar las tascas, esto se guarda en la variable TaskText y la guardaremos en la lista tasks-->
<input type="text" @bind="TaskText" />

<!--Boton para agregar tascas nuevas -->
<button class="btn btn-primary" @onclick="AddTaskAsync">Add</button>

@code {
    private List<TodoTask> tasks = new();

    private string? TaskText { get; set; }

    //Al inicializar la pagina TodoList nos cargan las tareas insertadas previamente
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tasks = await Http.GetFromJsonAsync<List<TodoTask>>("https://localhost:7046/api/TodoItems");
            StateHasChanged();
        }
    }

    //Cambiar el estado del checkbox con Put HTTP
    private async Task SaveAsync(TodoTask item)
    {
        await Task.Delay(1);
        await Http.PutAsJsonAsync($"https://localhost:7046/api/TodoItems/{item.Id}", item);
    }

    //Agregar un nuevo valor a la TodoList y hacer el Post HTTP
    private async Task AddTaskAsync()
    {
        var post = new TodoTask { Name = TaskText };
        tasks.Add(post);
        TaskText = "";
        await Http.PostAsJsonAsync("https://localhost:7046/api/TodoItems", post);
    }

    private async Task DeleteTaskAsync(TodoTask item)
    {
        tasks.Remove(item);
        await Http.DeleteAsync($"https://localhost:7046/api/TodoItems/{item.Id}");
    }
}
